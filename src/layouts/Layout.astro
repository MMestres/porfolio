---
import Background from '../components/layout/Background.astro';
import Light from '../components/layout/Light.astro';
import Header from '../components/layout/Header.astro';
import Footer from '../components/layout/Footer.astro';
import '@fontsource-variable/onest';

interface Props {
	title: string;
	description: string;
}

const { title, description } = Astro.props;
---

<!doctype html>
<html lang="es">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body class="min-w-[320px] relative overflow-x-hidden">
		<Background />
		<Light />
		<Header />
		<main class="z-10">
			<slot />
		</main>
		<Footer />
	</body>
</html>
<style is:global>
	:root {
		color-scheme: dark;
	}
	html {
		font-family: 'Onest Variable', sans-serif;
		color: #FFFBFB;
		background-color: #13020E;
		scroll-behavior: smooth;
	}
</style>
<script>
	function setUpMenu() {
		document.querySelector('.menu-button-close')?.addEventListener('click', () => {
      document.querySelector('.menu-button-close')?.classList.add('hidden');
      document.querySelector('.menu-button-open')?.classList.remove('hidden');
      document.querySelector('.menu')?.classList.add('grid');
      document.querySelector('.menu')?.classList.remove('hidden');
    });

    document.querySelectorAll('.menu-button-open, .menu a')?.forEach((elem) => {
        elem.addEventListener('click', () => {
        document.querySelector('.menu-button-open')?.classList.add('hidden');
        document.querySelector('.menu-button-close')?.classList.remove('hidden');
        document.querySelector('.menu')?.classList.add('hidden');
        document.querySelector('.menu')?.classList.remove('grid');
      });
    });
	}

	function setUpTimelineSlider() {
		document.querySelectorAll('.slider')?.forEach((elem, index) => {
			const images = elem.querySelectorAll('img');
			const size = images?.length ?? 0;

			if (size > 0) {
				const current = 0;
				for (let i = 1; i < size; i++) {
					images[i].classList.add('opacity-0');
				}
				images[current].classList.remove('opacity-0');
				const elemTitle = elem.querySelector('.slider-title')
				if (elemTitle != null) {
					elemTitle.innerHTML = images[current].alt
				}

				if (size > 1) {
					setTimeout(() => {
						showNext(images, size, current, elemTitle);
					}, 0 + (index++ * 4000));
				}
			}
		});
	}

	function showNext(images: NodeListOf<HTMLImageElement>, size: number, current: number, title: Element | null = null) {
		const next = (current + 1) % size;
		images[current].classList.add('opacity-0');
		images[next].classList.remove('opacity-0');

		if (title != null) {
			title.innerHTML = images[next].alt
		}

		setTimeout(() => {
			showNext(images, size, next, title);
		}, 12000);
	}

	function setUpCardSlider() {
		document.querySelectorAll('.card-slider')?.forEach((slider, indexSlider) => {
			slider.classList.add(`card-slider-${indexSlider}`);

			const items = slider.querySelectorAll('.card-slider-items > div');
			const buttons = slider.querySelectorAll('.card-slider-buttons > button');

			const size = Math.min(items.length, buttons.length);
			if (size > 0) {
				items.forEach((item, indexItem) => {
					item.classList.add(`card-slider-item-${indexSlider}-${indexItem}`);
					item.classList.add(`card-slider-item-${indexSlider}`);
					buttons[indexItem].classList.add(`card-slider-button-${indexSlider}-${indexItem}`);
					buttons[indexItem].classList.add(`card-slider-button-${indexSlider}`);
					buttons[indexItem].addEventListener('click', () => {
						onClickButtonCardSlider(indexSlider, indexItem);
					});
				});
			}
		});
	}

	function onClickButtonCardSlider(slider: number, item: number) {
		document.querySelectorAll(`.card-slider-button-${slider}`)?.forEach((button) => {
			if (button?.classList.contains(`card-slider-button-${slider}-${item}`) === true) {
				button?.classList.remove('bg-amber-500');
				button?.classList.remove('opacity-70');
				button?.classList.add('bg-secondary');
			} else {
				button?.classList.add('bg-amber-500');
				button?.classList.add('opacity-70');
				button?.classList.remove('bg-secondary');
			}
		});

		const height = document.querySelector(`.card-slider-item-${slider}-${item}`)?.clientHeight ?? 0;
		document.querySelectorAll(`.card-slider-item-${slider}`)?.forEach((elem) => {
			if (elem?.classList.contains(`card-slider-item-${slider}-${item}`) === true) {
				setTimeout(() => {
					elem.querySelector('img')?.classList.add('animate-pulseprimary');
				}, 1200);
			} else {
				elem.querySelector('img')?.classList.remove('animate-pulseprimary');
			}
			elem.setAttribute('style', `top: -${item * height}px`);
		});
	}

  window.onload = function() {
		setUpMenu();
		setUpTimelineSlider();
		setUpCardSlider();
  }

	window.onscroll = function() {
		const position = window.scrollY;
		const screen = window.screen.availHeight;

		if (document.querySelector('header')?.classList.contains('hidden') && position > (screen * 0.8)) {
			document.querySelector('header')?.classList.remove('hidden');
		} else if (!document.querySelector('header')?.classList.contains('hidden') && position < (screen * 0.4)) {
			document.querySelector('header')?.classList.add('hidden');
		}

		var reveal = document.querySelectorAll('.reveal-item')
		for (var i = 0; i < reveal.length; i++) {
			var windowHeight = window.innerHeight
			var revealTop = reveal[i].getBoundingClientRect().top
			var revealPoint = 150
			if (revealTop < windowHeight - revealPoint) {
				reveal[i].classList.add('animate-fade')
				reveal[i].classList.remove('hidden')
			}
		}
	}
</script>